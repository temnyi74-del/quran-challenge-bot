import asyncio, logging, os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.utils import executor
from aiogram.client.default import DefaultBotProperties
import pytz

# –ë–µ—Ä—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
TZ = pytz.timezone(os.getenv("TIMEZONE", "Asia/Yekaterinburg"))

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ñ–æ—Ç–æ
@dp.message()
async def handle_message(message: types.Message):
    if message.chat.id == GROUP_ID and message.photo:
        await message.reply(f"–ú–∞—à–∞–ê–ª–ª–∞h, {message.from_user.first_name}! –ü—É—Å—Ç—å –ê–ª–ª–∞h –ø—Ä–∏–º–µ—Ç ü§≤")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def reminder():
    while True:
        now = datetime.now(TZ)
        target = now.replace(hour=23, minute=59, second=0, microsecond=0)
        if target <= now:
            target += timedelta(days=1)
        await asyncio.sleep((target - now).total_seconds())
        try:
            await bot.send_message(GROUP_ID, "–°–µ–≥–æ–¥–Ω—è –Ω–µ –≤—Å–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å üòî –ü—É—Å—Ç—å –ö–æ—Ä–∞–Ω –±—É–¥–µ—Ç —Å–≤–µ—Ç–æ–º —Å–µ—Ä–¥–µ—Ü ü§≤")
        except Exception as e:
            logging.error(f"Reminder error: {e}")

async def main():
    logging.basicConfig(level=logging.INFO)
    asyncio.create_task(reminder())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
